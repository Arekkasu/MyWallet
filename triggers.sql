--CREATE OR REPLACE FUNCTION update_total_amount_on_revenue_change() RETURNS TRIGGER AS $$
--BEGIN
--    IF (TG_OP = 'DELETE') THEN
--        UPDATE users SET total_amount = total_amount - OLD.revenue_amount WHERE id_users = OLD.users_id_users;
--        RETURN OLD;
--    ELSIF (TG_OP = 'INSERT') THEN
--        UPDATE users SET total_amount = total_amount + NEW.revenue_amount WHERE id_users = NEW.users_id_users;
--        RETURN NEW;
--    ELSIF (TG_OP = 'UPDATE') THEN
--        IF NEW.revenue_amount > OLD.revenue_amount THEN
--            -- Si el nuevo valor es mayor, incrementa total_amount
--            UPDATE users SET total_amount = total_amount + (NEW.revenue_amount - OLD.revenue_amount) WHERE id_users = NEW.users_id_users;
--        ELSIF NEW.revenue_amount < OLD.revenue_amount THEN
--            -- Si el nuevo valor es menor, disminuye total_amount
--            UPDATE users SET total_amount = total_amount - (OLD.revenue_amount - NEW.revenue_amount) WHERE id_users = NEW.users_id_users;
--        END IF;
--        RETURN NEW;
--    END IF;
--END;
--$$ LANGUAGE plpgsql;

--CREATE TRIGGER revenue_change_trigger
--    AFTER INSERT OR UPDATE OR DELETE ON revenue
--    FOR EACH ROW EXECUTE PROCEDURE update_total_amount_on_revenue_change();


--
--CREATE OR REPLACE FUNCTION update_total_amount_on_expense_change() RETURNS TRIGGER AS $$
--BEGIN
--    IF (TG_OP = 'DELETE') THEN
--        UPDATE users SET total_amount = total_amount + OLD.expense_amount WHERE id_users = OLD.users_id_users;
--        RETURN OLD;
--    ELSIF (TG_OP = 'INSERT') THEN
--        UPDATE users SET total_amount = total_amount - NEW.expense_amount WHERE id_users = NEW.users_id_users;
--        RETURN NEW;
--    ELSIF (TG_OP = 'UPDATE') THEN
--        IF NEW.expense_amount > OLD.expense_amount THEN
--            -- Si el nuevo valor es mayor, disminuye total_amount
--            UPDATE users SET total_amount = total_amount - (NEW.expense_amount - OLD.expense_amount) WHERE id_users = NEW.users_id_users;
--        ELSIF NEW.expense_amount < OLD.expense_amount THEN
--            -- Si el nuevo valor es menor, incrementa total_amount
--            UPDATE users SET total_amount = total_amount + (OLD.expense_amount - NEW.expense_amount) WHERE id_users = NEW.users_id_users;
--        END IF;
--        RETURN NEW;
--    END IF;
--END;
--$$ LANGUAGE plpgsql;

--DROP TRIGGER IF EXISTS expense_change ON expenses;
--CREATE TRIGGER expense_change
--AFTER INSERT OR DELETE OR UPDATE ON expenses
--FOR EACH ROW EXECUTE PROCEDURE update_total_amount_on_expense_change();